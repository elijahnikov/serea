generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  onboarded     Boolean   @default(false)
  biography     String?
  genres        String[]
  website       String?
  instagram     String?
  tiktok        String?
  twitter       String?

  accounts                Account[]
  sessions                Session[]
  posts                   Post[]
  memberships             WatchlistMember[]
  watchlists              Watchlist[]
  watched                 Watched[]
  watchlistLikes          WatchlistLike[]
  watchlistComments       WatchlistComment[]
  watchlistCommentLikes   WatchlistCommentLike[]
  watchlistInvitesInvitee WatchlistInvite[]      @relation("Invitee")
  watchlistInvitesInviter WatchlistInvite[]      @relation("Inviter")
  notifications           Notification[]
  notificationActed       Notification[]         @relation("NotificationActed")
  event                   WatchEvent[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Movie {
  id          String  @id @default(cuid())
  contentId   Int
  title       String
  overview    String?
  poster      String?
  backdrop    String?
  releaseDate String

  runtime Int?     @default(0)
  budget  Int?     @default(0)
  revenue Int?     @default(0)
  imdbId  String?
  genres  String[] @default([])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  entries WatchlistEntry[]

  @@unique([contentId])
  @@index([contentId])
}

model Watchlist {
  id     String @id @default(cuid())
  userId String

  title       String
  description String?
  tags        String[]
  isPrivate   Boolean  @default(false)
  hideStats   Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  entries  WatchlistEntry[]
  members  WatchlistMember[]
  user     User               @relation(fields: [userId], references: [id])
  watched  Watched[]
  likes    WatchlistLike[]
  comments WatchlistComment[]
  invites  WatchlistInvite[]
  event    WatchEvent[]

  @@index([userId])
}

model WatchlistEntry {
  id          String @id @default(cuid())
  order       Int
  watchlistId String
  contentId   Int
  userId      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  watchlist Watchlist    @relation(fields: [watchlistId], references: [id])
  movie     Movie        @relation(fields: [contentId], references: [contentId])
  watched   Watched[]
  event     WatchEvent[]

  @@unique([order, id])
  @@index([userId])
  @@index([watchlistId])
  @@index([contentId])
}

enum Role {
  OWNER
  EDITOR
  VIEWER
}

model WatchlistMember {
  id          String @id @default(cuid())
  watchlistId String
  userId      String

  role Role @default(VIEWER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  watchlist Watchlist @relation(fields: [watchlistId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  watched   Watched[]

  @@index([userId])
  @@index([watchlistId])
}

model Watched {
  id          String @id @default(cuid())
  watchlistId String
  userId      String
  memberId    String
  entryId     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  watchlist Watchlist       @relation(fields: [watchlistId], references: [id], onDelete: Cascade)
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  member    WatchlistMember @relation(fields: [memberId], references: [id], onDelete: Cascade)
  entry     WatchlistEntry  @relation(fields: [entryId], references: [id], onDelete: Cascade)

  @@unique([watchlistId, userId, memberId, entryId])
  @@index([userId])
  @@index([watchlistId])
  @@index([memberId])
  @@index([entryId])
}

model WatchlistLike {
  userId      String
  watchlistId String

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  watchlist Watchlist @relation(fields: [watchlistId], references: [id], onDelete: Cascade)

  @@id([userId, watchlistId])
  @@index([userId])
  @@index([watchlistId])
}

model WatchlistComment {
  id          String  @id @default(cuid())
  watchlistId String
  userId      String
  parentId    String?
  content     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  watchlist Watchlist @relation(fields: [watchlistId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  parent  WatchlistComment?      @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies WatchlistComment[]     @relation("CommentReplies")
  likes   WatchlistCommentLike[]

  @@index([watchlistId])
  @@index([userId])
  @@index([parentId])
}

model WatchlistCommentLike {
  userId    String
  commentId String

  user    User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment WatchlistComment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@id([userId, commentId])
  @@index([userId])
  @@index([commentId])
}

model WatchlistInvite {
  id String @id @default(cuid())

  inviteeId    String
  inviteeEmail String
  inviterId    String
  watchlistId  String
  role         Role

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  invitee   User      @relation("Invitee", fields: [inviteeId], references: [id])
  inviter   User      @relation("Inviter", fields: [inviterId], references: [id])
  watchlist Watchlist @relation(fields: [watchlistId], references: [id])

  @@index([inviteeId])
  @@index([inviterId])
  @@index([watchlistId])
}

enum NotificationType {
  WATCHLIST_INVITE
  WATCHLIST_COMMENT
  WATCHLIST_LIKE
  FOLLOW
}

model Notification {
  id String @id @default(cuid())

  userId  String
  actorId String

  type NotificationType
  read Boolean          @default(false)
  data Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User @relation(fields: [userId], references: [id], onDelete: Cascade)
  actor User @relation("NotificationActed", fields: [actorId], references: [id])

  @@index([userId])
  @@index([actorId])
}

model WatchEvent {
  id String @id @default(cuid())

  userId      String
  watchlistId String
  entryId     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  watchlist Watchlist      @relation(fields: [watchlistId], references: [id], onDelete: Cascade)
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  entry     WatchlistEntry @relation(fields: [entryId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([watchlistId])
  @@index([entryId])
}
